<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1462101438848">{:repl-history {:ide [], :local [&quot;(:db config)&quot; &quot;(defn init-system! [config]\n  (let [conns (merge (db/start-connection (:db config))\n                     {:server (core/start-server (:server config))}\n                     {:config config})]\n    (reset! core/conn-and-conf conns)))&quot; &quot;(defonce conn-and-conf (atom nil))&quot; &quot;(get-in @conn-and-conf [:db])&quot; &quot;(:collection @conn-and-conf)&quot; &quot;(def conn-and-conf-aus (atom {:config {:db \&quot;ciao\&quot;}{:seer {:path \&quot;foo/path\&quot; :core \&quot;foo/core\&quot;}}}))&quot; &quot;(def conn-and-conf-aus (atom {:config  {:seer {:path \&quot;foo/path\&quot; :core \&quot;foo/core\&quot;}}}))&quot; &quot;(atom {:config {:db {:host \&quot;localhost\&quot;, :db-name \&quot;seer-api\&quot;, :collection \&quot;operations\&quot;}}, {:seer {:path \&quot;foo/path\&quot; :core \&quot;foo/core\&quot;}}})&quot; &quot;{:config {:db {:host \&quot;localhost\&quot;, :db-name \&quot;seer-api\&quot;, :collection \&quot;operations\&quot;}}, {:seer {:path \&quot;foo/path\&quot; :core \&quot;foo/core\&quot;}}}&quot; &quot;{:config {:db {:host \&quot;localhost\&quot;, :db-name \&quot;seer-api\&quot;, :collection \&quot;operations\&quot;}},\n                                {:seer {:path \&quot;foo/path\&quot; :core \&quot;foo/core\&quot;}}}&quot; &quot;(def conn-and-conf-aus (atom {:config {:db {:host \&quot;localhost\&quot;, :db-name \&quot;seer-api\&quot;, :collection \&quot;operations\&quot;}},\n                                {:seer {:path \&quot;foo/path\&quot; :core \&quot;foo/core\&quot;}}}))&quot; &quot;(def conn-and-conf-aus (atom {:config {:db {:host \&quot;localhost\&quot;, :db-name \&quot;seer-api\&quot;, :collection \&quot;operations\&quot;}}}))&quot; &quot;(def conn-and-conf-aus (atom {:config {:db {:host \&quot;localhost\&quot;, :db-name \&quot;seer-api\&quot;, :collection \&quot;operations\&quot;}},\n                                }))&quot; &quot;(def conn-and-conf-aus (atom {:config {:db {:host \&quot;localhost\&quot;, :db-name \&quot;seer-api\&quot;, :collection \&quot;operations\&quot;}},{:ciao \&quot;d\&quot;}\n                                }))&quot; &quot;(def conn-and-conf-aus (atom {:config {:db {:host \&quot;localhost\&quot;, :db-name \&quot;seer-api\&quot;, :collection \&quot;operations\&quot;}}{:ciao \&quot;d\&quot;}\n                                }))&quot; &quot;(def conn-and-conf-aus (atom {:config {:db {:host \&quot;localhost\&quot;, :db-name \&quot;seer-api\&quot;, :collection \&quot;operations\&quot;}}\n                                :seer {:path \&quot;foo/path\&quot; :core \&quot;foo/core\&quot;}}))&quot; &quot;(get-in @conn-and-conf [:collection])&quot; &quot;(get-in @conn-and-conf [:db [:collection]])&quot; &quot;(get-in @conn-and-conf [:config :seer :collection])&quot; &quot;(get-in @conn-and-conf-aus [:config :db :collection])&quot; &quot;[job-id (.toString (java.util.UUID/randomUUID))\n            {seer-path :path seer-core :core collection :collection} (get-in @conn-and-conf [:config :seer])]&quot; &quot;(merge {seer-path :path seer-core :core} (get-in @conn-and-conf [:config :seer])\n            {collection :collection} (get-in @conn-and-conf [:config :db :collection]))&quot; &quot;(defroutes\n  site\n  (context \&quot;/v1\&quot; []\n\n    (POST \&quot;/forecasts\&quot; {body :body}\n      (let [job-id (.toString (java.util.UUID/randomUUID))\n            {seer-path :path seer-core :core} (get-in @conn-and-conf [:config :seer])\n            {collection :collection} (get-in @conn-and-conf [:config :db :collection])]\n        (log/info (db/store-job-status job-id (:db @conn-and-conf)))\n        (ut/copy-input-to-location job-id (:db @conn-and-conf) body seer-path)\n        (ela/start-background-processing job-id (:db @conn-and-conf) seer-path seer-core)\n        {:status 202\n         :body   {:job-id job-id}}))\n\n    (GET \&quot;/forecasts/:job-id\&quot; [job-id]\n      (let [data (db/find-user-by-job-id job-id (:db @conn-and-conf))]\n        (if data\n          {:status  200\n           :headers {\&quot;Content-type\&quot; \&quot;application/json\&quot;}\n           :body    data}\n          {:status 404\n           :body   \&quot;the job-id does not exist!\\n\&quot;})))\n\n    (GET \&quot;/forecasts/:job-id/result\&quot; [job-id]\n\n      ))\n\n  (route/not-found \&quot;Page not found\\n\&quot;))&quot; &quot;(POST \&quot;/forecasts\&quot; {body :body}\n      (let [job-id (.toString (java.util.UUID/randomUUID))\n            {seer-path :path seer-core :core} (get-in @conn-and-conf [:config :seer])\n            {collection :collection} (get-in @conn-and-conf [:config :db :collection])]\n        (log/info (db/store-job-status job-id (:db @conn-and-conf)))\n        (ut/copy-input-to-location job-id (:db @conn-and-conf) body seer-path)\n        (ela/start-background-processing job-id (:db @conn-and-conf) seer-path seer-core)\n        {:status 202\n         :body   {:job-id job-id}}))&quot; &quot;(:db @conn-and-conf :collection collection)&quot; &quot;(:db @conn-and-conf, :collection collection)&quot; &quot;{:db @conn-and-conf :collection collection}&quot; &quot;[:db @conn-and-conf :collection collection]&quot; &quot;{:db @conn-and-conf, :collection collection}&quot; &quot;(:db @conn-and-conf)&quot; &quot;{(:db @conn-and-conf) :collection collection}&quot; &quot;(:collection collection)&quot; &quot;(:collection \&quot;ciao\&quot;)&quot; &quot;{:db @conn-and-conf :collection (get-in @conn-and-conf [:config :db :collection])}&quot; &quot;(:db @conn-and-conf :collection (get-in @conn-and-conf [:config :db :collection]))&quot; &quot;{(:db @conn-and-conf) :collection (get-in @conn-and-conf [:config :db :collection])}&quot; &quot;{(:db @conn-and-conf) (:collection (get-in @conn-and-conf [:config :db :collection]))}&quot; &quot;(:collection (get-in @conn-and-conf [:config :db :collection]))&quot; &quot;{:collection (get-in @conn-and-conf [:config :db :collection])}&quot; &quot;{(:db @conn-and-conf) {:collection (get-in @conn-and-conf [:config :db :collection])}}&quot; &quot;{:db @conn-and-conf}&quot; &quot;(defn store-job-status [job-id db collection]\n  (try\n    (mc/insert db collection {:_id job-id :status \&quot;new\&quot; :last-update (new java.util.Date)})\n    (log/info \&quot;ma lo passo?\&quot; collection)\n    (catch Exception e\n      {:status \&quot;ERROR\&quot;\n       :reason (str \&quot;Can't add the elaboration status: \&quot; (.getMessage e))})))&quot; &quot;[job-id (.toString (java.util.UUID/randomUUID))\n            {seer-path :path seer-core :core} (get-in @conn-and-conf [:config :seer])\n            {collection :collection} (get-in @conn-and-conf [:config :db :collection])]&quot; &quot;(let [job-id (.toString (java.util.UUID/randomUUID))\n            {seer-path :path seer-core :core} (get-in @conn-and-conf [:config :seer])\n            {collection :collection} (get-in @conn-and-conf [:config :db :collection])]\n        (log/info (db/store-job-status job-id (:db @conn-and-conf) collection))\n        (ut/copy-input-to-location job-id body seer-path)\n        (ela/start-background-processing job-id (:db @conn-and-conf) collection seer-path seer-core)\n        {:status 202\n         :body   {:job-id job-id}})&quot; &quot;(POST \&quot;/forecasts\&quot; {body :body}\n      (let [job-id (.toString (java.util.UUID/randomUUID))\n            {seer-path :path seer-core :core} (get-in @conn-and-conf [:config :seer])\n            {collection :collection} (get-in @conn-and-conf [:config :db :collection])]\n        (log/info (db/store-job-status job-id (:db @conn-and-conf) collection))\n        (ut/copy-input-to-location job-id body seer-path)\n        (ela/start-background-processing job-id (:db @conn-and-conf) collection seer-path seer-core)\n        {:status 202\n         :body   {:job-id job-id}}))&quot; &quot;{collection :collection}&quot; &quot;collection&quot; &quot;(init-system! default-config)&quot; &quot;(get-in @conn-and-conf [:config :seer])&quot; &quot;(get-in @conn-and-conf [:config :db :collection])&quot; &quot;(get-in @conn-and-conf [:config :db])&quot; &quot;(db/store-job-status job-id (:db @conn-and-conf) \&quot;collection\&quot;)&quot; &quot;(POST \&quot;/forecasts\&quot; {body :body}\n\n      (let [job-id (.toString (java.util.UUID/randomUUID))\n            {seer-path :path seer-core :core} (get-in @conn-and-conf [:config :seer])\n            collection (get-in @conn-and-conf [:config :db :collection])]\n        (try\n          (db/store-job-status job-id (:db @conn-and-conf) \&quot;collection\&quot;)\n          (ut/copy-input-to-location job-id body seer-path)\n          (ela/start-background-processing job-id (:db @conn-and-conf) collection seer-path seer-core)\n          {:status 202\n           :body   {:job-id job-id}}\n          (catch Exception x\n            {:status 503\n             :body   {:job-id job-id :status \&quot;ERROR\&quot; :reason (.getMessage x)}})\n          )))&quot; &quot;(POST \&quot;/forecasts\&quot; {body :body}\n\n      (let [job-id (.toString (java.util.UUID/randomUUID))\n            {seer-path :path seer-core :core} (get-in @conn-and-conf [:config :seer])\n            collection (get-in @conn-and-conf [:config :db :collection])]\n        (try\n          (db/store-job-status job-id (:db1 @conn-and-conf) collection)\n          (ut/copy-input-to-location job-id body seer-path)\n          (ela/start-background-processing job-id (:db @conn-and-conf) collection seer-path seer-core)\n          {:status 202\n           :body   {:job-id job-id}}\n          (catch Exception x\n            {:status 503\n             :body   {:job-id job-id :status \&quot;ERROR\&quot; :reason (.getMessage x)}})\n          )))&quot; &quot;(def catch-all [handler]\n  (fn [req]\n    (try\n      (handler req)\n      (catch Exception x\n        (let [error-id (str \&quot;ERR-\&quot; (.toString (java.util.UUID/randomUUID)))]\n          (log/error x (str \&quot;Exception number: \&quot; error-id))\n          {:status  503\n           :headers {\&quot;Content-Type\&quot; \&quot;application/json\&quot;}\n           :body    {:status   \&quot;ERROR\&quot;\n                     :message  \&quot;The operation couldn't be completed due to an internal error.\&quot;\n                     :error-id error-id}})))))&quot; &quot;(defn catch-all [handler]\n  (fn [req]\n    (try\n      (handler req)\n      (catch Exception x\n        (let [error-id (str \&quot;ERR-\&quot; (.toString (java.util.UUID/randomUUID)))]\n          (log/error x (str \&quot;Exception number: \&quot; error-id))\n          {:status  503\n           :headers {\&quot;Content-Type\&quot; \&quot;application/json\&quot;}\n           :body    {:status   \&quot;ERROR\&quot;\n                     :message  \&quot;The operation couldn't be completed due to an internal error.\&quot;\n                     :error-id error-id}})))))&quot; &quot;(throw (ex-info \&quot;Error while calculating ETA\&quot; {:status \&quot;ERROR\&quot; :reason \&quot;ETA calculation issue\&quot; :details (clojure.string/trim-newline (:out eta))}))&quot; &quot;(defn calc-processing-eta [job-id base-path core-path]\n  (let [eta (sh core-path \&quot;temp.csv\&quot; \&quot;10\&quot; \&quot;ETA\&quot; :dir (str base-path job-id))]\n    (if (.contains (:out eta) \&quot;ERROR\&quot;)\n      (throw (ex-info \&quot;Error while calculating ETA\&quot; \n                      {:status \&quot;ERROR\&quot; :reason \&quot;ETA calculation issue\&quot; \n                       :details (clojure.string/trim-newline (:out eta))}))\n      {:eta (clojure.string/trim-newline (:out eta))})))&quot; &quot;(db/update-job-status db collection job-id status)&quot; &quot;(fn [status]\n                             (db/update-job-status db collection job-id status))&quot; &quot;[status-update-fn (fn [status]\n                             (db/update-job-status db collection job-id status))]&quot; &quot;[actual-print message]&quot; &quot;(defn stampare-colori [actual-print message]\n  (acutal-print (str \&quot;&lt;red&gt;\&quot; message \&quot;&lt;/red&gt;\&quot;)))&quot; &quot;(defn stampare-colori [actual-print message]\n  (actual-print (str \&quot;&lt;red&gt;\&quot; message \&quot;&lt;/red&gt;\&quot;)))&quot; &quot;(stampare-colori (fn [m] (println m)) \&quot;ciao\&quot;)&quot; &quot;(processing-step status-update-fn \&quot;calculating ETA\&quot;\n                       (fn [] (calc-processing-eta job-id base-path core-path)))&quot; &quot;(ut/validate-csv job-id base-path)&quot; &quot;(defn start-background-processing [job-id db collection base-path core-path]\n  (future\n    (let [status-update-fn (fn [status]\n                             (db/update-job-status db collection job-id status))]\n      (processing-step status-update-fn \&quot;validation\&quot;\n                       (fn [] (ut/validate-csv job-id base-path) nil))\n\n      (processing-step status-update-fn \&quot;calculating ETA\&quot;\n                       (fn [] (calc-processing-eta job-id base-path core-path)))\n\n      (processing-step status-update-fn \&quot;calculating forecast\&quot;\n                       (fn [] (forecast job-id base-path core-path) nil))\n      )))&quot; &quot;(processing-step println \&quot;test\&quot; (fn [] (+ 1 1)))&quot; &quot;(processing-step println \&quot;test\&quot; (fn [] (+ 1 1) nil))&quot; &quot;(processing-step println \&quot;test\&quot; (fn [] (/ 1 0) ))&quot; &quot;(processing-step println \&quot;test\&quot; (fn [] {:eta (+ 1 1)}))&quot; &quot;(processing-step identity \&quot;test\&quot; (fn [] {:eta (+ 1 1)}))&quot;], :remote []}}</component>
</project>